48920	torsten_fink thomas_zimmermann eberhard_zehendner	amica einfache uniforme nutzung heterogener verteilter dynamischer ressourcen		ARCS_Workshops	
84211	stephan_neuhaus thomas_zimmermann christian_holler andreas_zeller	predict vulnerable software component	where do most vulnerability occur in software we vulture tool automatically mine exist vulnerability database and version archive to map past vulnerability to component the result ranking of the most vulnerable component be a perfect base for further investigation on what make component vulnerable in a investigation of the mozilla vulnerability history we surprisingly find that component that have a single vulnerability in the past be generally not likely to have further vulnerability however component that have similar import or function call be likely to be vulnerable base on this observation we be able to extend vulture by a simple predictor that correctly predict about half of all vulnerable component and about two third of all prediction be correct this allow developer and project manager to focus they they effort where it be need most b we should look at nsxpinstallmanager b because it be likely to contain yet unknown vulnerability doi 101145 13152451315311 bug know vulnerability mozilla vulnerable components import	ACM_Conference_on_Computer_and_Communications_Security	University_of_Calgary Alberta Canada
138528	thomas_zimmermann andreas_zeller	visualize memory graph	to understand the dynamics of a run program it be often useful to examine its state at specific moment during its execution we present memory graph as a means to capture and explore program state a memory graph give a comprehensive view of all datum structure of a program datum item be relate by operation like dereferencing indexing or member access although memory graph be typically too large to be visualize as a whole one can easily focus on specific aspect use wellknown graph operation for instance a greatest common subgraph visualize commonality and difference between program state 1 a structured view of memory explore the state of a program to view its variable value and current execution position be a typical task in debugging program today s interactive debugger allow access the value of arbitrary variable and print they value typically value be show as text here be a example output from the gnu debugger gdb lrb gdb rrb print tree tree lcb value 7 name 0x8049e88 ada leave 0x804d7d8 right 0x0 leave thread false right thread false date lcb day of week thu day 1 month 1 year 1970 vptr 0x8049f78 date virtual table rcb static shared 4711 rcb lrb gdb rrb fig 1 print textual datum with gdb although modern debugger offer graphical user interface instead of gdb s command line datum value be still show as text this be useful in the most case but fail badly as soon as reference and pointer come into play consider figure 1 for example where do tree left point to of course one can simply print the dereferenced value however a user will never notice if two pointer point to the same address except by thoroughly check and compare pointer value doi 101007 354045875115 memory graph debugger gdb program state debugging	Software_Visualization	
138995	silvia_breu thomas_zimmermann	mining aspect from version history	aspect rain identify crossculling concern in a program to help migrate it to a aspectoriented design such concern may not exist from the beginning but emerge over time by analyse where developer add code to a program we historybased aspect mining lrb bam rrb identify and rank crosscutting concern we evaluate the effectiveness of we approach with the history of three opensource project bam scale up to industrialsized project for example we be able to identify a lock concern that crosscut 1284 method in eclipse additionally the precision of ham increase with project size and history for eclipse it reach 90 for the top10 candidate doi 101109 ase 200650 crosscutting concern eclipse aspect mining crosscutting concern aop	Aspects_For_Legacy_Applications	
138998	silvia_breu thomas_zimmermann christian_lindig	ham crosscutting concern in eclipse	as program evolve newly add functionality sometimes no longer align with the original design end up scatter across the software system aspect mining try to identify such crosscutting concern in a program to support maintenance or as a first step towards a aspectoriented program previous approach to aspect mining apply static or dynamic program analysis technique to a single version of a system we exploit all version from a system s cvs history to mine aspect candidate we be about to extend we research prototype to a eclipse plugin call ham when a single cvs commit add call to the same lrb small rrb set of method in many unrelated location these method call be likely to be crosscutting ham employ formal concept analysis to identify aspect candidate analyse one commit operation at a time make the approach scale to industrialsized program in a evaluation we mine crosscutting concern from eclipse 32 m3 and find that up to 90 of the top10 aspect candidate be truly crosscutting concern doi 101145 11888351188840 eclipse crosscutting aspect candidates	Aspects_For_Legacy_Applications	
138999	silvia_breu thomas_zimmermann christian_lindig	mining eclipse for crosscutting		Aspects_For_Legacy_Applications	
139001	silvia_breu thomas_zimmermann christian_lindig v._benjamin_livshits	mining addition of method call in argouml	in this paper we refine the classical cochange to the addition of method call we use this concept to find usage pattern and to identify crosscutting concern for argouml doi 101145 11379831138025 argouml method call	Aspects_For_Legacy_Applications	
231780	thomas_zimmermann	learning from project history to support programmer	nowadays any larger software project collect lot of datum change to source code be store in version control archive and problem in bug database in this paper we present two tool that mine both source to help developer write better program the erose tool guide programmer along related change in a similar way amazoncom support its customer you change fkey lsb rsb and erose suggest initdefault lrb rrb because in the past both item always have be change together the hatari tool warn programmer against risky location programmer fail at change resolveclasspath lrb rrb be careful to measure risk hatari locate change that lead to problem as indicate by later fix amazoncom related change risky locations bug database erose	GI_Jahrestagung_(1)	
363476	thomas_zimmermann	take lesson from history	mining of software repository have become a active research area however most past research consider any change to software as beneficial this thesis will show how we can benefit from a classification into good and bad change the knowledge of bad change will improve defect prediction and localization furthermore we will describe how to learn projectspecific error pattern that will help reduce future error doi 101145 11342851134474	ICSE	Saarland_University Saarbr√ºcken Germany
363477	thomas_zimmermann peter_weisgerber stephan_diehl andreas_zeller	mining version histories to guide software change		ICSE	Saarland_University
363503	sunghun_kim thomas_zimmermann e._james_whitehead_jr andreas_zeller	predict fault from cached history	we analyze the version history of 7 software system to predict the most fault prone entity and file the basic assumption be that fault do not occur in isolation but rather in burst of several related fault therefore we cache location that be likely to have fault start from the location of a know lrb fix rrb fault we cache the location itself any location change together with the fault recently add location and recently change location by consult the cache at the moment a fault be fix a developer can detect likely faultprone location this be useful for prioritize verification and validation resource on the most fault prone file or entity in we evaluation of seven open source project with more than 200000 revision the cache select 10 of the source code file these file account for 73 95 of fault a significant advance beyond the state of the art doi 101109 icse 200766 bug mining burst process metric repository	ICSE	Saarland_University Germany
363725	thomas_zimmermann nachiappan_nagappan	predict defect use network analysis on dependency graph	in software development resource for quality assurance be limit by time and by cost in order to allocate resource effectively manager need to rely on they experience back by code complexity metric but often dependency exist between various piece of code over which manager may have little knowledge these dependency can be construe as a low level graph of the entire system in this paper we propose to use network analysis on these dependency graph this allow manager to identify central program unit that be more likely to face defect in we evaluation on windows server 2003 we find that the recall for model build from network measure be by 10 point higher than for model build from complexity metric in addition network measure could identify 60 of the binary that the windows developer consider as criticaltwice as many as identify by complexity metric doi 101145 13680881368161 dependency graph complexity metric binary network analysis network metric	ICSE	University_of_Calgary Calgary AB Canada
363734	harald_gall michele_lanza thomas_zimmermann	4th international workshop on mining software repositories lrb msr 2007 rrb	software repository such as source control system defect tracking system and archive communication between project personnel be use to help manage the progress of software project software practitioner and researcher more and more recognize the potential benefit of mining this information to support the maintenance of software system improve software designreuse and empirically validate novel idea and technique research be now proceed to uncover the way in which mining these repository can help to understand software development to support prediction about software development and to plan various evolutionary aspect of software project doi 101109 icsecompanion 20078 repository software project mining	ICSE_Companion	Saarland_Univ. Germany
364928	nicolas_bettenburg rahul_premraj thomas_zimmermann sunghun_kim	duplicate bug report consider harmful really	in a survey we find that most developer have experience duplicated bug report however only few consider they as a serious problem this contradict popular wisdom that consider bug duplicate as a serious problem for open source project in the survey developer also point out that the additional information provide by duplicate help to resolve bug quicker in this paper we therefore propose to merge bug duplicate rather than treat they separately we quantify the amount of information that be add for developer and show that automatic triaging can be improve as well in addition we discuss the different reason why user submit duplicate bug report in the first place doi 101109 icsm 20084658082 triage bug report eclipse automatic duplicate	ICSM	
364992	ahmed_e._hassan thomas_zimmermann	mythse myth in software engineering half day icsm 2007working session		ICSM	
435217	adrian_schroter thomas_zimmermann andreas_zeller	predict component failure at design time		ISESE	Saarland_University Saarbr√ºcken Germany
451025	premkumar_t._devanbu brendan_murphy nachiappan_nagappan thomas_zimmermann valentin_dallmeier	defect 2008 international workshop on defect in large software system	bug be everywhere in today s software and because of the huge economic damage they be actively study the goal of this oneday workshop be to connect the different research community with each other and with industry doi 101145 13906301390668	ISSTA	University_of_Calgary Calgary AB Canada
465896	thomas_zimmermann stephan_diehl andreas_zeller	how history justify system architecture lrb or not rrb	the revision history of a software system convey important information about how and why the system evolve in time the revision history can also tell we which part of the system be couple by common change whenever the database schema be change the sqlquery lrb rrb method be alter too this evolutionary coupling can be compare with the coupling as impose by the system architecture difference indicate anomaly which may be subject to restructuring we rose prototype analyze finegrained coupling between software entity as indicate by common change it turn out that common change be a good indicator for modularity that evolutionary coupling should be determine between syntactical entity lrb rather than file or module rrb and that common change can indicate coupling between software entity and nonprogram artifact that be unavailable to the analysis of a single version doi 101109 iwpse 20031231213 evolutionary coupling whenever cvs cochange common change	IWPSE	
465898	daniel_schreck valentin_dallmeier thomas_zimmermann	how documentation evolve over time	good source code documentation especially of programming interface be essential for use and maintain software component in this paper we present the quasoledo tool that automatically measure the quality of documentation with respect to completeness quantity and readability we apply we set of metric to the eclipse project and benchmark against the welldocumented java class library the result of quasoledo be a map of documentation quality in eclipse show the best documentation for its core component additionally we look at the evolution of eclipse and identify batch update that cause jump in documentation quality for eclipse only 326 of all change touch documentation doi 101145 12949481294952 documentation eclipse readability	IWPSE	Saarland_University Saarbr√ºcken Germany
471426	silvia_breu thomas_zimmermann	mining aspect from version history	aspect rain identify crossculling concern in a program to help migrate it to a aspectoriented design such concern may not exist from the beginning but emerge over time by analyse where developer add code to a program we historybased aspect mining lrb bam rrb identify and rank crosscutting concern we evaluate the effectiveness of we approach with the history of three opensource project bam scale up to industrialsized project for example we be able to identify a lock concern that crosscut 1284 method in eclipse additionally the precision of ham increase with project size and history for eclipse it reach 90 for the top10 candidate doi 101109 ase 200650 crosscutting concern eclipse aspect mining crosscutting concern aop	ASE	Saarland_University Germany
471614	sunghun_kim thomas_zimmermann kai_pan e._james_whitehead_jr	automatic identification of bugintroducing change	bugfix be widely use for predict bug or find risky part of software however a bugfix do not contain information about the change that initially introduce a bug such bugintroducing change can help identify important property of software bug such as correlated factor or causality for example they reveal which developer or what kind of source code change introduce more bug in contrast to bugfix that be relatively easy to obtain the extraction of bugintroducing change be challenge in this paper we present algorithm to automatically and accurately identify bugintroducing change we remove false positive and false negative by use annotation graph by ignore nonsemantic source code change and outlier fix additionally we validate that the fix we use be true fix by a manual inspection altogether we algorithm can remove about 38 51 of false positive and 14 15 of false negative compare to the previous algorithm finally we show application of bugintroducing change that demonstrate they value for research doi 101109 ase 200623 szz bug report fixe scm xes	ASE	
472061	valentin_dallmeier thomas_zimmermann	extraction of bug localization benchmark from history	researcher have propose a number of tool for automatic bug localization give a program and a description of the failure such tool pinpoint a set of statement that be most likely to contain the bug evaluate bug localization tool be a difficult task because exist benchmark be limit in size of subject and number of bug in this paper we present ibugs a approach that semiautomatically extract benchmark for bug localization from the history of a project for aspectj we extract 369 bug 223 out of these have associate test case we demonstrate the relevance of we dataset with a case study on the bug localization tool ample doi 101145 13216311321702 bug ibug jira repository aspectj	ASE	Saarland_University Saarbr√ºcken Germany
488330	thomas_zimmermann	fast datum mining for program support		LWA	
508878	thomas_zimmermann sunghun_kim andreas_zeller e._james_whitehead_jr	mining version archive for cochanged line	file class or method have frequently be investigate in recent research on cochange in this paper we present a first study at the level of line to identify line change across several version we define the annotation graph which capture how line evolve over time the annotation graph provide more finegrained software evolution information such as life cycle of each line and related change whenever a developer change line 1 of versiontxt she also change line 25 of libraryjava doi 101145 11379831138001 annotation graph cochange individual lines	MSR	
508889	silvia_breu thomas_zimmermann christian_lindig	mining eclipse for crosscutting concern	software may contain functionality that do not align with its architecture such crosscutting concern do not exist from the beginning but emerge over time by analyse where developer add code to a program we historybased mining identify crosscutting concern in a twostep process first we mine cvs archive for set of method where a call to a specific single method be add in a second step such simple crosscutting concern be combine to complex crosscutting concern to compute these efficiently we apply formal concept analysis a algebraic theory historybased mining scale well we be the first to report aspect mine from a industrialsized project like eclipse for example we identify a lock concern that crosscut 1284 method doi 101145 11379831138006 crosscutting concern fca	MSR	Saarland_University Saarbr√ºcken Germany
508926	nicolas_bettenburg rahul_premraj thomas_zimmermann sunghun_kim	extract structural information from bug report	in software engineering experiment the description of bug report be typically treat as natural language text although it often contain stack trace source code and patch neglect such structural element be a loss of valuable information structure usually lead to a better performance of machine learning approach in this paper we present a tool call infozilla that detect structural element from bug report with near perfect accuracy and allow we to extract they we anticipate that infozilla can be use to leverage datum from bug report at a different granularity level that can facilitate interesting research in the future doi 101145 13707501370757 stack trace bug structured crash structural information	MSR	University_of_Calgary Calgary AB Canada
508943	sunghun_kim thomas_zimmermann miryung_kim ahmed_e._hassan audris_mockus tudor_girba martin_pinzger e._james_whitehead_jr andreas_zeller	tare a exchange language for mining software repository	software repository have be get a lot of attention from researcher in recent year in order to analyze software repository it be necessary to first extract raw datum from the version control and problem tracking system this pose two challenge lrb 1 rrb extraction require a nontrivial effort and lrb 2 rrb the result depend on the heuristic use during extraction these challenge burden researcher that be new to the community and make it difficult to benchmark software repository mining since it be almost impossible to reproduce experiment do by another team in this paper we present the tare corpus tare collect extract datum from software repository in order to build a collection of project that will simplify extraction process additionally the collection can be use for benchmarking as the first step we propose a exchange language capable of make sharing and reuse datum as simple as possible doi 101145 11379831137990 software repository exchange language se datum	MSR	
508946	david_schuler thomas_zimmermann	mining usage expertise from version archive	in software development there be a increase need to find and connect developer with relevant expertise exist expertise recommendation system be mostly base on variation of the line 10 rule developer who change a file most often have the most implementation expertise in this paper we introduce the concept of usage expertise which manifest itself whenever developer be use functionality eg by call api method we present preliminary result for the eclipse project that demonstrate that we technique allow to recommend expert for file with no or little history identify developer with similar expertise and measure the usage of api method doi 101145 13707501370779 individual developer version archive api method api element	MSR	University_of_Calgary Calgary AB Canada
508968	jacek_sliwerski thomas_zimmermann andreas_zeller	when do change induce fix	as a software system evolve programmer make change that sometimes cause problem we analyze cvs archive for i fixinducing change i change that lead to problem indicate by fix we show how to automatically locate fixinducing change by link a version archive lrb such as cvs rrb to a bug database lrb such as bugzilla rrb in a first investigation of the mozilla and eclipse history it turn out that fixinducing change show distinct pattern with respect to they size and the day of week they be apply doi 101145 10831421083147 szz fixe buggy fridays	MSR	
508982	thomas_zimmermann silvia_breu christian_lindig v._benjamin_livshits	mining addition of method call in argouml	in this paper we refine the classical cochange to the addition of method call we use this concept to find usage pattern and to identify crosscutting concern for argouml doi 101145 11379831138025 argouml method call	MSR	
508997	cathrin_weis rahul_premraj thomas_zimmermann andreas_zeller	how long will it take to fix this bug	predict the time and effort for a software problem have long be a difficult task we present a approach that automatically predict the fix effort ie the personhours spend on fix a issue we technique leverage exist issue tracking system give a new issue report we use the lucene framework to search for similar earlier report and use they average time as a prediction we approach thus allow for early effort estimation help in assign issue and scheduling stable release we evaluate we approach use effort datum from the jboss project give a sufficient number of issue report we automatic prediction be close to the actual effort for issue that be bug we be off by only one hour beat na 253 ve prediction by a factor of four doi 101109 msr 200713 msr bug same category fix repository	MSR	Saarland_University Germany
509001	thomas_zimmermann	mining workspace updates in cvs	the version control archive cvs record not only all change in a project but also activity datum such as when developer create or update they workspace furthermore cvs record when it have to integrate change because of parallel development in this paper we analyze the cvs activity datum of four large opensource project gcc jboss jedit and python to investigate parallel development what be the degree of parallel development how frequently do conflict occur during update and how be they resolve how do we identify change that contain integration doi 101109 msr 200722 cvs parallel development activity data	MSR	Saarland_University Saarbrucken Germany
521927	silvia_breu thomas_zimmermann christian_lindig	aspect mining for large system	the eclipse plugin ham identify potential aspect in large program it analyze the program s history and obtain set of function call that be likely to be crosscutting later during programming ham inform the programmer when she be about to extend or change such a problematic concern doi 101145 11766171176651	OOPSLA_Companion	
521928	silvia_breu thomas_zimmermann christian_lindig	aspect mining for large system	the eclipse plugin ham identify potential aspect in large program it analyze the program s history and obtain set of function call that be likely to be crosscutting later during programming ham inform the programmer when she be about to extend or change such a problematic concern doi 101145 11766171176651	OOPSLA_Companion	Saarland_University Saarbr√ºcken Germany
522924	thomas_zimmermann valentin_dallmeier konstantin_halachev andreas_zeller	erose guide programmer in eclipse	the erose plugin for eclipse use version archive to guide programmer you change fkey lsb rsb and erose suggest you to change initdefault lrb rrb because both item always have be change together in the past in addition erose point out item coupling that be undetectable by program analysis for instance between fkey lsb rsb and a property file all erose need be a cvs repository we design erose to be as efficient and unobtrusive as possible doi 101145 10948551094927 erose repository	OOPSLA_Companion	Saarland_University Saarbr√ºcken Germany
552964	wolfgang_holz rahul_premraj thomas_zimmermann andreas_zeller	predict software metric at design time	how do problem domain impact software feature we mine software code basis to relate problem domain lrb characterize by import rrb to code feature such as complexity size or quality the result predictor take the specific import of a component and predict its size complexity and quality metric in a experiment involve 89 plugin of the eclipse project we find good prediction accuracy for most metric since the predictor rely only on import relationship and since these be available at design time we approach allow for early estimation of crucial software metric doi 101007 97835406956606 early estimation problem domain import development cost plugin	PROFES	University_of_Calgary Canada
579478	stephan_diehl andreas_zeller thomas_zimmermann	be softwarearchive erzahlen		Software_Engineering	
583095	gengshen_du thomas_zimmermann gunther_ruhe	explain product release planning result use concept analysis	objective this paper aim to generate explanation from a series of datum point obtain from a decision support system call releaseplanner for support product release planning and consider to be a black box method concept analysis be apply to 1085 datum point receive from run 10 scenario of a real world product release planning project with 35 candidate solution generate by releaseplanner result three main result be obtain lrb 1 rrb pattern between input and output lrb 2 rrb impact of individual input parameter on output and lrb 3 rrb sensitivity level of output in dependence of input conclusion concept analysis be show to be a feasible technique for gain more insight into the structure of result obtain from a black box inputoutput system such as but not limit to releaseplanner decision support input and output concept analysis black box complex solution	SEKE	
601226	v._benjamin_livshits thomas_zimmermann	dynamine find common error pattern by mining software revision history	a great deal of attention have lately be give to address software bug such as error in operate system driver or security bug however there be many other lesser known error specific to individual application or api and these violation of applicationspecific code rule be responsible for a multitude of error in this paper we propose dynamine a tool that analyze source code checkin to find highly correlate method call as well as common bug fix in order to automatically discover applicationspecific code pattern potential pattern discover through mining be pass to a dynamic analysis tool for validation finally the result of dynamic analysis be present to the userthe combination of revision history mining and dynamic analysis technique leverage in dynamine prove effective for both discover new applicationspecific pattern i and i for find error when apply to very large application with many manyear of development and debugging effort behind they we have analyze eclipse and jedit two widelyused mature highly extensible application consist of more than 3600000 line of code combine by mine revision history we have discover 56 previously unknown highly applicationspecific pattern out of these 21 be dynamically confirm as very likely valid pattern and a total of 263 pattern violation be find doi 101145 10817061081754 mining large fix dynamic analysis api	ESEC/SIGSOFT_FSE	
601302	jacek_sliwerski thomas_zimmermann andreas_zeller	hatari raise risk awareness	as a software system evolve programmer make change which sometimes lead to problem the risk of later problem significantly depend on the location of the change which be the location where change impose the greatest risk we hatari prototype relate a version history lrb such as cvs rrb to a bug database lrb such as bugzilla rrb to detect those location where change have be risky in the past hatari make this risk visible for developer by annotate source code with color bar furthermore hatari provide view to browse through the most risky location and to analyze the risk history of a particular location doi 101145 10817061081725 file version bug source file risk awareness risky locations	ESEC/SIGSOFT_FSE	
601589	nicolas_bettenburg sascha_just adrian_schroter cathrin_weiss rahul_premraj thomas_zimmermann	what make a good bug report	in software development bug report provide crucial information to developer however these report widely differ in they quality we conduct a survey among developer and user of apache eclipse and mozilla to find out	SIGSOFT_FSE	University_of_Calgary Alberta Canada
641672	sascha_just rahul_premraj thomas_zimmermann	towards the next generation of bug tracking system	developers typically rely on the information submit by enduser to resolve bug we conduct a survey on information need and commonly face problem with bug reporting among several hundred developer and user of the apache eclipse and mozilla project in this paper we present the result of a card sort on the 175 comment send back to we by the responder of the survey the card sort reveal several hurdle involve in reporting and resolve bug which we present in a collection of recommendation for the design of new bug tracking system such system could provide contextual assistance reminder to add information and most important assistance to collect and report crucial information to developer doi 101109 vlhcc 20084639063 apache bug eclipse reporting tracker	VL/HCC	University_of_Calgary AB Canada
708138	rahul_premraj thomas_zimmermann	building software cost estimation model use homogenous data	several study have be conduct to determine if companyspecific cost model deliver better prediction accuracy than crosscompany cost model however mixed result have leave the question still open for further investigation we suspect this to be a consequence of heterogenous datum use to build crosscompany cost model in this paper we build crosscompany cost model use homogenous datum by group project by they business sector we result suggest that it be worth to train model use only homogenous datum rather than all project available doi 101109 esem 200734 mixed result cost model prediction accuracy homogeneity business sector	ESEM	Saarland_University Germany
710910	silvia_breu thomas_zimmermann christian_lindig	ham crosscutting concern in eclipse	as program evolve newly add functionality sometimes no longer align with the original design end up scatter across the software system aspect mining try to identify such crosscutting concern in a program to support maintenance or as a first step towards a aspectoriented program previous approach to aspect mining apply static or dynamic program analysis technique to a single version of a system we exploit all version from a system s cvs history to mine aspect candidate we be about to extend we research prototype to a eclipse plugin call ham when a single cvs commit add call to the same lrb small rrb set of method in many unrelated location these method call be likely to be crosscutting ham employ formal concept analysis to identify aspect candidate analyse one commit operation at a time make the approach scale to industrialsized program in a evaluation we mine crosscutting concern from eclipse 32 m3 and find that up to 90 of the top10 aspect candidate be truly crosscutting concern doi 101145 11888351188840 eclipse crosscutting aspect candidates	ETX	Saarland_University Saarbr√ºcken Germany
710911	thomas_zimmermann	finegrained processing of cvs archive with apfel	in this paper we present the apfel plugin that collect finegrained change from version archive in a database apfel be build upon the eclipse infrastructure for cvs and java in order to describe change apfel use token such as method call exception and variable usage we demonstrate the usefulness of apfel s database with several case study doi 101145 11888351188839 apfel finegrained change	ETX	Saarland_University Saarbr√ºcken Germany
710982	nicolas_bettenburg sascha_just adrian_schroter cathrin_weis rahul_premraj thomas_zimmermann	quality of bug report in eclipse	the information in bug report influence the speed at which bug be fix however bug report differ in they quality of information we conduct a survey among eclipse developer to determine the information in report that they widely use and the problem frequently encounter we result show that step to reproduce and stack trace be most seek after by developer while inaccurate step to reproduce and incomplete information pose the largest hurdle surprisingly developer be indifferent to bug duplicate such insight be useful to design new bug tracking tool that guide reporter at provide more helpful information we also present a prototype of a qualitymeter tool that measure the quality of bug report by scan its content doi 101145 13282791328284 incomplete information bug report eclipse software developer duplicate	ETX	University_of_Calgary Calgary Alberta Canada
734670	sunghun_kim thomas_zimmermann e._james_whitehead_jr andreas_zeller	predict fault from cached history	we analyze the version history of 7 software system to predict the most fault prone entity and file the basic assumption be that fault do not occur in isolation but rather in burst of several related fault therefore we cache location that be likely to have fault start from the location of a know lrb fix rrb fault we cache the location itself any location change together with the fault recently add location and recently change location by consult the cache at the moment a fault be fix a developer can detect likely faultprone location this be useful for prioritize verification and validation resource on the most fault prone file or entity in we evaluation of seven open source project with more than 200000 revision the cache select 10 of the source code file these file account for 73 95 of fault a significant advance beyond the state of the art doi 101109 icse 200766 bug mining burst process metric repository	ISEC	
874200	dominique_eyheramendy thomas_zimmermann	objectoriented symbolic derivation and automatic programming of finite element in mechanic		Eng._Comput._(Lond.)	
981372	paul_holleis thomas_zimmermann daniel_gmach	draw graph within graph	the task of draw subgraph be often underestimate and they be simply emphasize use different color or line style in this paper we present a approach for	J._Graph_Algorithms_Appl.	
1129938	thomas_zimmermann peter_weisgerber stephan_diehl andreas_zeller	mining version histories to guide software change		IEEE_Trans._Software_Eng.	
1130107	marc_eaddy thomas_zimmermann kaitin_d._sherwood vibhav_garg gail_c._murphy nachiappan_nagappan alfred_v._aho	do crosscutting concern cause defect	there be a grow consensus that crosscutt concern harm code quality a example of a crosscutting concern be a functional requirement whose implementation be distribute across multiple software module we ask the question how much do the amount that a concern be crosscutt affect the number of defect in a program we conduct three extensive case study to help answer this question all three study reveal a moderate to strong statistically significant correlation between the degree of scattering and the number of defect this paper describe the experimental framework we develop to conduct the study the metric we adopt and develop to measure the degree of scattering the study we perform the effort we undertake to remove experimental and other bias and the result we obtain in the process we have formulate a theory that explain why increase scattering might lead to increase defect doi 101109 tse 200836 ity scat crosscutting concern qual crosscutting	IEEE_Trans._Software_Eng.	University_of_Calgary Calgary
1179624	adrian_schroter thomas_zimmermann rahul_premraj andreas_zeller	where do bug come from	where do bug in program come from this be one of the pivotal research question in software engineering to answer it one can find out which part of a program be more defectprone than other and then investigate which property correlate with defect density in other word once we can measure the effect we can search for its cause bug database of opensource project be a good place to begin search because they record all the problem that occur during the project s lifetime however the location of the fix lrb and thus the defect rrb be hide in version archive and have to be extract separately lsb 5 rsb as a result one obtain a mapping from defect to code location doi 101145 12187761218791	ACM_SIGSOFT_Software_Engineering_Notes	
1179676	jacek_sliwerski thomas_zimmermann andreas_zeller	when do change induce fix	as a software system evolve programmer make change that sometimes cause problem we analyze cvs archive for i fixinducing change i change that lead to problem indicate by fix we show how to automatically locate fixinducing change by link a version archive lrb such as cvs rrb to a bug database lrb such as bugzilla rrb in a first investigation of the mozilla and eclipse history it turn out that fixinducing change show distinct pattern with respect to they size and the day of week they be apply doi 101145 10831421083147 szz fixe buggy fridays	ACM_SIGSOFT_Software_Engineering_Notes	
1202713	thomas_zimmermann nachiappan_nagappan andreas_zeller	predict bug from history		Software_Evolution	
1210480	tilman_holschuh markus_pauser kim_herzig thomas_zimmermann rahul_premraj andreas_zeller	predict defect in sap java code a experience report	which component of a large software system be the most defectprone in a study on a large sap java system we evaluate and compare a number of defect predictor base on code feature such as complexity metric static error detector change frequency or component import thus replicate a number of earlier case study in a industrial context we find the overall predictive power to be lower than expect still the result regression model successfully predict 50 x 2013 60 of the 20 most defectprone component doi 101109 icsecompanion 20095070975 defectprone complexity metric import sap single	ICSE_Companion	
1210635	thomas_zimmermann rahul_premraj jonathan_sillito silvia_breu	improving bug tracking system	it be important that information provide in bug report be relevant and complete in order to help resolve bug quickly however often such information trickle to developer after several iteration of communication between developer and reporter poorly design bug tracking system be partly to blame for this exchange of information be stretch over time we paper address the concern of bug tracking system by propose four broad direction for enhancement as a proofofconcept we also demonstrate a prototype interactive bug tracking system that gather relevant information from the user and identify file that need to be fix to resolve the bug doi 101109 icsecompanion 20095070993 bug	ICSE_Companion	
1227475	nachiappan_nagappan andreas_zeller thomas_zimmermann	guest editors introduction mining software archives	modern programming environment automatically collect lot of datum on software development notably change and defect the field of mining software archive be concern with the automate extraction collection and abstraction of information from this datum this be the introduction to a special issue of ieee software present a selection of the exciting research that be take place in the field doi 101109 ms 200914	IEEE_Software	Microsoft_Research
1248517	david_ma david_schuler thomas_zimmermann jonathan_sillito	expert recommendation with usage expertise	global and distribute software development increase the need to find and connect developer with relevant expertise exist recommendation system typically model expertise base on file change lrb implementation expertise rrb while these approach have show success they require a substantial recorded history of development for a project previously we have propose the concept of usage expertise ie expertise manifest through the act of call lrb use rrb a method in this paper we assess the viability of this concept by evaluate expert recommendation for the aspectj and eclipse project we find that both usage and implementation expertise have comparable level of accuracy which suggest that usage expertise may be use as a substitute measure we also find a notable overlap of method call across both project which suggest that usage expertise can be leverage to recommend expert from different project and thus for project with little or no history doi 101109 icsm 20095306386 method call eclipse recommendation systems developer recommendation aspectj	ICSM	
1248524	thomas_zimmermann	change and bug mining and predict development activity	software development result in a huge amount of datum change to source code be record in version archive bug be report to issue tracking system and communication be archive in email and newsgroup we present technique for mining version archive and bug database to understand and support software development first we introduce the concept of coaddition of method call which we use to identify pattern that describe how method should be call we use dynamic analysis to validate these pattern and identify violation the coaddition of method call can also detect crosscutting change which be a indicator for concern that could have be realize as aspect in aspectoriented programming second we present technique to build model that can successfully predict the most defectprone part of largescale industrial software in we experiment windows server 2003 this help manager to allocate resource for quality assurance to those part of a system that be expect to have most defect the propose measure on dependency graph outperform traditional complexity metric in addition we find empirical evidence for a domino effect ie depend on defectprone binary increase the chance of have defect doi 101109 icsm 20095306296 msr bug method call quality assurance version archive	ICSM	
1256145	thomas_zimmermann nachiappan_nagappan harald_gall emanuel_giger brendan_murphy	crossproject defect prediction a large scale experiment on datum vs domain vs process	prediction of software defect work well within project as long as there be a sufficient amount of datum available to train any model however this be rarely the case for new software project and for many company so far only a few have study focus on transfer prediction model from one project to another in this paper we study crossproject defect prediction model on a large scale for 12 realworld application we run 622 crossproject prediction we result indicate that crossproject prediction be a serious challenge ie simply use model from project in the same domain or with the same process do not lead to accurate prediction to help software engineer choose model wisely we identify factor that do influence the success of crossproject prediction we also derive decision tree that can provide early estimate for precision recall and accuracy before a prediction be attempt doi 101145 15956961595713	ESEC/SIGSOFT_FSE	Microsoft_Research Redmond WA USA
1256174	gaeul_jeong sunghun_kim thomas_zimmermann	improving bug triage with bug toss graph	bug report be typically assign to a single developer who be then responsible for fix the bug in mozilla and eclipse between 37 44 of bug report be toss lrb reassign rrb to other developer for example because the bug have be assign by accident or another developer with additional expertise be need in any case toss increase the timetocorrection for a bug in this paper we introduce a graph model base on markov chain which capture bug toss history this model have several desirable quality first it reveal developer network which can be use to discover team structure and to find suitable expert for a new task second it help to better assign developer to bug report in we experiment with 445000 bug report we model reduce toss event by up to 72 in addition the model increase the prediction accuracy by up to 23 percentage point compare to traditional bug triage approach doi 101145 15956961595715 bug report bug triage bug assignment reassignment brs	ESEC/SIGSOFT_FSE	Microsoft_Research Seattle WA USA
1311606	md._mainur_rahman g√ºnther_ruhe thomas_zimmermann	optimize assignment of developer for fix bug a initial evaluation for eclipse project	decision on x 201c who should fix this bug x 201d have substantial impact on the duration of the process and its result in this paper optimize strategy for the assignment of the x 201c right x 201d developer for do the x 201c right x 201d task be study and the result be compare to manual lrb call ad hoc rrb assignment the quality of assignment be measure by the match between request lrb from bug rrb and available lrb from developer rrb competence profile different variant of greedy search with vary parameter of lookahead time be study the quality of the result have be evaluate for nine milestone of the open source eclipse jdt project the optimize strategy with largest look ahead time be demonstrate to be substantially better than the ad hoc solution in term of the quality of the assignment and the number of bug which can be fix within the give time interval doi 101145 16712481671302 bug	null	Microsoft_Research_One_Microsoft_Way_Redmond WA_98052 USA
1311626	thomas_zimmermann nachiappan_nagappan	predict defect with program dependency	software development be a complex and errorprone task a important factor during the development of complex system be the understanding of the dependency that exist between different piece of the code in this paper we show that for windows server 2003 dependency datum can predict the defectproneness of software element since most dependency of a component be already know in the design phase we prediction model can support design decision doi 101145 16712481671301 decision trees defectproneness binary prediction model design alternative	null	Microsoft_Research_Redmond WA USA
1322172	silvia_breu rahul_premraj jonathan_sillito thomas_zimmermann	information need in bug report improve cooperation between developer and user	for many software project bug tracking system play a central role in support collaboration between the developer and the user of the software to better understand this collaboration and how tool support can be improve we have quantitatively and qualitatively analyse the question ask in a sample of 600 bug report from the mozilla and eclipse project we categorise the question and analyse response rate and time by category and project we result show that the role of user go beyond simply report bug they active and ongoing participation be important for make progress on the bug they report base on the result we suggest four way in which bug tracking system can be improve doi 101145 17189181718973 oss information need bug report eclipse fix	null	Microsoft_Research Redmond WA USA
1431394	ben_liblit nachiappan_nagappan thomas_zimmermann	proceedings of the 2nd international workshop on defects in large software systems hold in conjunction with the acm sigsoft international symposium on software testing and analysis lrb issta 2009 rrb	background aspectoriented software development lrb aosd rrb be a paradigm that promote advanced separation of concern and modularity throughout the software development lifecycle with a distinctive emphasis on modular structure that cut across traditional abstraction boundary in the last 15 year research on aosd have boost around the world the aosdbr research community lrb aosdbr stand for aosd in brazil rrb emerge in the last decade and have provide different contribution in a variety of topic however despite some evidence in term of the number and quality of its outcome there be no organized characterization of the aosdbr community that position it against the international aosd research community and the software engineering research community in brazil aim in this paper we main goal be to characterize the aosdbr community with respect to the research develop in the last decade confront it with the aosd international community and the brazilian software engineering community method data collection validation and analysis be perform in collaboration with several researcher of the aosdbr community the characterization be present from three different perspective lrb i rrb a historical timeline of event and main milestone achieve by the community lrb ii rrb a overview of the research develop by the community in term of key challenge open issue and related work and lrb iii rrb a analysis on the impact of the aosdbr community outcome in term of wellknown indicator such as number of papers and number of citation result we analysis show that the aosdbr community have impact both the international aosd research community and the software engineering research community in brazil doi 101016 jjss 201208031 aosd	International_Symposium_on_Software_Testing_and_Analysis	Microsoft_Research
1515583	st√©phane_commend thomas_zimmermann	objectoriented nonlinear finite element programming a primer	all rights reserve no part of this book may be reproduce in any form by any electronic or mechanical means lrb include photocopy record or information storage and retrieval rrb without permission in write from the publisher a semantic web primer grigoris antoniou and frank van harmelen p cm lrb cooperative information system rrb include bibliographical reference and index owl rdf semantic web xml	Advances_in_Engineering_Software	
1606051	thomas_zimmermann rahul_premraj andreas_zeller	predict defect for eclipse	we have map defect from the bug database of eclipse lrb one of the largest opensource project rrb to source code location the result data set list the number of pre and postrelease defect for every package and file in the eclipse release 20 21 and 30 we additionally annotated the datum with common complexity metric all datum be publicly available and can serve as a benchmark for defect prediction model doi 101109 promise 200710	Proceedings_of_the_29th_International_Conference_on_Software_Engineering_Workshops	Saarland_University
